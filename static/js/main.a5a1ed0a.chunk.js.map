{"version":3,"sources":["Components/Header/index.jsx","Components/Builder/Color/index.jsx","Components/Builder/Author/index.jsx","Components/Builder/Title/index.jsx","Components/Builder/Description/index.jsx","Components/Builder/Thumbnail/index.jsx","Components/Builder/Fields/index.jsx","Components/Builder/Image/index.jsx","Components/Builder/Footer/index.jsx","Components/Builder/index.jsx","Components/Output/index.jsx","Components/Main/index.jsx","Components/App/index.jsx","registerServiceWorker.js","index.js","Components/constants.js"],"names":["Header","render","id","href","title","React","PureComponent","Color","props","handleClick","setState","displayColorPicker","state","handleClose","handleChangeComplete","color","event","hex","intColor","Math","round","rgb","r","g","b","document","getElementById","style","className","type","name","placeholder","value","this","onClick","cursor","readOnly","position","zIndex","top","right","bottom","left","backgroundColor","disableAlpha","onChangeComplete","Component","Author","URL","iconURL","target","classNames","trim","split","length","RegEx","test","push","splice","indexOf","Set","join","imageURL","onChange","updateIconURL","maxLength","updateName","updateURL","Title","updateTitle","Description","description","rows","updateDescription","Thumbnail","thumbnailURL","updateThumbnailURL","Fields","button","fields","index","children","setAttribute","removeAttribute","insertAdjacentHTML","field","parentNode","removeChild","addField","role","aria-label","removeField","Image","updateImageURL","Footer","text","Output","embedObject","form","elements","parseInt","author_name","hasOwnProperty","author","author_url","url","author_icon_url","icon_url","i","field_name","field_value","field_inline","checked","inline","thumbnail","image","timestamp","Date","innerHTML","JSON","stringify","jsonOutput","replace","element","selections","range","body","createTextRange","moveToElementText","select","execCommand","window","getSelection","createRange","selection","selectNodeContents","removeAllRanges","addRange","generateJSON","copyJSON","Main","Builder","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","exports"],"mappings":"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","file":"static/js/main.a5a1ed0a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Header extends React.PureComponent {\r\n  render = () => (\r\n    <header>\r\n      <div id=\"back-to-home\">\r\n        <a href=\"https://smallbrain.club\">&larr;</a>\r\n      </div>\r\n      <div title=\"Create discord embeds for the welcomer feature in the Invisibility bot.\">Invisibility Embed Builder</div>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { ChromePicker } from 'react-color';\r\n\r\nclass Color extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: '#4f545c',\r\n      intColor: 0,\r\n      displayColorPicker: false\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ displayColorPicker: false });\r\n  };\r\n\r\n  handleChangeComplete = (color, event) => {\r\n    this.setState({\r\n      color: color.hex,\r\n      intColor: 256 * 256 * Math.round(color.rgb.r) + 256 * Math.round(color.rgb.g) + Math.round(color.rgb.b)\r\n    });\r\n    document.getElementById('builder-container').style['border-left'] = `5px solid ${color.hex}`;\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"embed-group embed-color\">\r\n        <input\r\n          id = \"color\"\r\n          type = \"text\"\r\n          name = \"color\"\r\n          placeholder = \"Embed Color\"\r\n          value = { this.state.intColor }\r\n          onClick = { this.handleClick }\r\n          style = {{\r\n            cursor: 'pointer'\r\n          }}\r\n          readOnly\r\n        />\r\n\r\n        {\r\n          this.state.displayColorPicker ?\r\n            <div\r\n              style = {{\r\n                position: 'absolute',\r\n                zIndex: 2\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  position: 'fixed',\r\n                  top: '0px',\r\n                  right: '0px',\r\n                  bottom: '0px',\r\n                  left: '0px',\r\n                  backgroundColor: 'rgba(0, 0, 0, .15)'\r\n                }}\r\n                onClick={ this.handleClose }/>\r\n              <ChromePicker\r\n                color = { this.state.color }\r\n                disableAlpha = { true }\r\n                onChangeComplete = { this.handleChangeComplete }\r\n              />\r\n            </div>\r\n          : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Color;\r\n","import React from 'react';\r\nimport { RegEx } from '../../constants';\r\n\r\nclass Author extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      URL: '',\r\n      iconURL: ''\r\n    };\r\n  }\r\n\r\n  updateName(event) {\r\n    this.setState({\r\n      name: event.target.value\r\n    });\r\n  }\r\n\r\n  updateURL(event) {\r\n    let classNames = event.target.className.trim().split(' ');\r\n    if (event.target.value.length && !RegEx.URL.test(event.target.value)) {\r\n      classNames.push('invalid');\r\n    }\r\n    else {\r\n      classNames.splice(classNames.indexOf('invalid'), 1);\r\n    }\r\n    event.target.className = [ ...new Set(classNames) ].join(' ').trim();\r\n\r\n    this.setState({\r\n      URL: event.target.value\r\n    });\r\n  }\r\n\r\n  updateIconURL(event) {\r\n    let classNames = event.target.className.trim().split(' ');\r\n    if (event.target.value.length && !RegEx.imageURL.test(event.target.value)) {\r\n      classNames.push('invalid');\r\n    }\r\n    else {\r\n      classNames.splice(classNames.indexOf('invalid'), 1);\r\n    }\r\n    event.target.className = [ ...new Set(classNames) ].join(' ').trim();\r\n\r\n    this.setState({\r\n      iconURL: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"embed-group embed-author\">\r\n        <div className = \"embed-author-icon\">\r\n          <input\r\n            type = \"url\"\r\n            name = \"author:icon_url\"\r\n            placeholder = \"Author Icon URL\"\r\n            value = {this.state.iconURL}\r\n            onChange = {event => this.updateIconURL(event)}\r\n          />\r\n        </div>\r\n        <div className=\"embed-author-name\">\r\n          <input\r\n            type = \"text\"\r\n            name = \"author:name\"\r\n            placeholder = \"Author Name\"\r\n            maxLength = \"256\"\r\n            value = {this.state.name}\r\n            onChange = {event => this.updateName(event)}\r\n          />\r\n        </div>\r\n        <div className=\"embed-author-url\">\r\n          <input\r\n            type = \"url\"\r\n            name = \"author:url\"\r\n            placeholder = \"Author URL\"\r\n            value = {this.state.URL}\r\n            onChange = {event => this.updateURL(event)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Author;\r\n","import React from 'react';\r\nimport { RegEx } from '../../constants';\r\n\r\nclass Title extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      URL: ''\r\n    };\r\n  }\r\n\r\n  updateTitle(event) {\r\n    this.setState({\r\n      title: event.target.value\r\n    });\r\n  }\r\n\r\n  updateURL(event) {\r\n    let classNames = event.target.className.trim().split(' ');\r\n    if (event.target.value.length && !RegEx.URL.test(event.target.value)) {\r\n      classNames.push('invalid');\r\n    }\r\n    else {\r\n      classNames.splice(classNames.indexOf('invalid'), 1);\r\n    }\r\n    event.target.className = [ ...new Set(classNames) ].join(' ').trim();\r\n\r\n    this.setState({\r\n      URL: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"embed-group embed-title\">\r\n        <div className = \"embed-title-text\">\r\n          <input\r\n            type = \"text\"\r\n            name = \"title\"\r\n            placeholder = \"Title\"\r\n            maxLength=\"256\"\r\n            value = {this.state.title}\r\n            onChange = {event => this.updateTitle(event)}\r\n          />\r\n        </div>\r\n        <div className=\"embed-title-url\">\r\n          <input\r\n            type=\"url\"\r\n            name=\"url\"\r\n            placeholder=\"URL\"\r\n            value = {this.state.URL}\r\n            onChange = {event => this.updateURL(event)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React from 'react';\r\n\r\nclass Description extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: ''\r\n    };\r\n  }\r\n\r\n  updateDescription(event) {\r\n    this.setState({\r\n      description: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"embed-group embed-description\">\r\n        <textarea\r\n          name = \"description\"\r\n          placeholder = \"Description\"\r\n          maxLength = \"2000\"\r\n          rows = \"5\"\r\n          value = {this.state.description}\r\n          onChange = {event => this.updateDescription(event)}\r\n        >\r\n        </textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Description;\r\n","import React from 'react';\r\nimport { RegEx } from '../../constants';\r\n\r\nclass Thumbnail extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      thumbnailURL: ''\r\n    };\r\n  }\r\n\r\n  updateThumbnailURL(event) {\r\n    let classNames = event.target.className.trim().split(' ');\r\n    if (event.target.value.length && !RegEx.imageURL.test(event.target.value)) {\r\n      classNames.push('invalid');\r\n    }\r\n    else {\r\n      classNames.splice(classNames.indexOf('invalid'), 1);\r\n    }\r\n    event.target.className = [ ...new Set(classNames) ].join(' ').trim();\r\n\r\n    this.setState({\r\n      thumbnailURL: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"embed-group embed-thumbnail\">\r\n        <div className = \"embed-thumbnail-url\">\r\n          <input\r\n            type = \"url\"\r\n            name = \"thumbnail:url\"\r\n            placeholder = \"Thumbnail URL\"\r\n            value = {this.state.thumbnailURL}\r\n            onChange = {event => this.updateThumbnailURL(event)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Thumbnail;\r\n","import React from 'react';\r\n\r\nclass Fields extends React.Component {\r\n  addField(button) {\r\n    let fields = document.getElementById('fields');\r\n    let index = fields.children.length;\r\n\r\n\r\n    if (index >= 24) {\r\n      button.setAttribute('disabled', true);\r\n    }\r\n    else {\r\n      button.removeAttribute('disabled');\r\n    }\r\n\r\n    fields.insertAdjacentHTML('beforeend',\r\n      `<div id=\"field-${index}\" class=\"embed-group\" style=\"display: inline-block; margin-top: 0; width: 50%\">\r\n         <div class=\"field\">\r\n           <input type=\"text\" name=\"field-${index}:name\" maxlength=\"256\" placeholder=\"Field ${index + 1} Name\" />\r\n           <textarea name=\"field-${index}:value\" maxlength=\"1024\" rows=\"2\" placeholder=\"Field ${index +1} Description\"></textarea>\r\n           <label>\r\n             <input type=\"checkbox\" name=\"field-${index}:inline\" onChange=\"let field = document.getElementById(this.name.replace(':inline', '')); this.checked ? field.setAttribute('style', 'display: inline-block; margin-top: 0; width: 50%;') : field.removeAttribute('style')\"} checked />\r\n             <span>Inline</span>\r\n           </label>\r\n         </div>\r\n       </div>`);\r\n\r\n    let removeBtn = document.getElementById('btn-removeField');\r\n    removeBtn.removeAttribute('disabled');\r\n  }\r\n\r\n  removeField(button) {\r\n    let fields = document.getElementById('fields');\r\n    let index = fields.children.length;\r\n\r\n    if (index - 1) {\r\n      button.removeAttribute('disabled');\r\n    }\r\n    else {\r\n      button.setAttribute('disabled', true);\r\n    }\r\n\r\n    let field = document.getElementById(`field-${index - 1}`);\r\n    if (field) {\r\n      field.parentNode.removeChild(field);\r\n    }\r\n\r\n    let addBtn = document.getElementById('btn-addField');\r\n    addBtn.removeAttribute('disabled');\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"embed-group embed-fields\">\r\n        <div id = \"fields\"></div>\r\n        <div className = \"embed-group-controls\">\r\n          <button\r\n            id = \"btn-addField\"\r\n            type = \"button\"\r\n            onClick = {event => this.addField(event.target)}\r\n          >\r\n            <span role = \"img\" aria-label = \"Add Emoji\">➕</span>&ensp;\r\n            Add Field\r\n          </button>\r\n          <button\r\n            id = \"btn-removeField\"\r\n            type = \"button\"\r\n            onClick = {event => this.removeField(event.target)}\r\n          >\r\n            <span role = \"img\" aria-label = \"Remove Emoji\">➖</span>&ensp;\r\n            Remove Field\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fields;\r\n","import React from 'react';\r\nimport { RegEx } from '../../constants';\r\n\r\nclass Image extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imageURL: ''\r\n    };\r\n  }\r\n\r\n  updateImageURL(event) {\r\n    let classNames = event.target.className.trim().split(' ');\r\n    if (event.target.value.length && !RegEx.imageURL.test(event.target.value)) {\r\n      classNames.push('invalid');\r\n    }\r\n    else {\r\n      classNames.splice(classNames.indexOf('invalid'), 1);\r\n    }\r\n    event.target.className = [ ...new Set(classNames) ].join(' ').trim();\r\n\r\n    this.setState({\r\n      imageURL: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"embed-group embed-image\">\r\n        <div className = \"embed-image-url\">\r\n          <input\r\n            type = \"url\"\r\n            name = \"image:url\"\r\n            placeholder = \"Image URL\"\r\n            value = {this.state.imageURL}\r\n            onChange = {event => this.updateImageURL(event)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport { RegEx } from '../../constants';\r\n\r\nclass Footer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n      iconURL: ''\r\n    };\r\n  }\r\n\r\n  updateText(event) {\r\n    this.setState({\r\n      text: event.target.value\r\n    });\r\n  }\r\n\r\n  updateIconURL(event) {\r\n    let classNames = event.target.className.trim().split(' ');\r\n    if (event.target.value.length && !RegEx.imageURL.test(event.target.value)) {\r\n      classNames.push('invalid');\r\n    }\r\n    else {\r\n      classNames.splice(classNames.indexOf('invalid'), 1);\r\n    }\r\n    event.target.className = [ ...new Set(classNames) ].join(' ').trim();\r\n\r\n    this.setState({\r\n      iconURL: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"embed-group embed-footer\">\r\n        <div className=\"embed-timestamp\">\r\n          <label>\r\n            <input\r\n              name = \"timestamp\"\r\n              type = \"checkbox\"\r\n            />\r\n            Add Timestamp\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Color from './Color';\r\nimport Author from './Author';\r\nimport Title from './Title';\r\nimport Description from './Description';\r\nimport Thumbnail from './Thumbnail';\r\nimport Fields from './Fields';\r\nimport Image from './Image';\r\nimport Footer from './Footer';\r\n\r\nclass Output extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"cell\">\r\n        <div id=\"builder-container\">\r\n          <form id=\"embed-builder\">\r\n            <div className=\"embed\">\r\n              <div className=\"embed-content\">\r\n                <div className=\"embed-content-inner\">\r\n\r\n                  <Color />\r\n                  <Author />\r\n                  <Title />\r\n                  <Description />\r\n                  <Thumbnail />\r\n                  <Fields />\r\n                  <Image />\r\n\r\n                </div>\r\n              </div>\r\n\r\n              <Footer />\r\n\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React from 'react';\r\nimport { RegEx } from '../constants';\r\n\r\nclass Output extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      embedObject: {}\r\n    };\r\n  }\r\n\r\n  generateJSON() {\r\n    let form = document.getElementById('embed-builder');\r\n\r\n    let embedObject = {};\r\n\r\n    // Color\r\n    let color = form.elements['color'].value;\r\n    if (color) {\r\n      embedObject.color = parseInt(color, 10);\r\n    }\r\n    // Author\r\n    let author_name = form.elements['author:name'].value;\r\n    if (author_name) {\r\n      if (!embedObject.hasOwnProperty('author')) {\r\n        embedObject.author = {}\r\n      }\r\n      embedObject.author.name = author_name;\r\n\r\n      let author_url = form.elements['author:url'].value;\r\n      if (author_url && RegEx.URL.test(author_url)) {\r\n        embedObject.author.url = author_url;\r\n      }\r\n\r\n      let author_icon_url = form.elements['author:icon_url'].value;\r\n      if (author_icon_url && RegEx.imageURL.test(author_icon_url)) {\r\n        embedObject.author.icon_url = author_icon_url;\r\n      }\r\n    }\r\n    // Title\r\n    let title = form.elements['title'].value;\r\n    if (title) {\r\n      embedObject.title = title;\r\n    }\r\n    // URL\r\n    let url = form.elements['url'].value;\r\n    if (url && RegEx.URL.test(url)) {\r\n      embedObject.url = url;\r\n    }\r\n    // Description\r\n    let description = form.elements['description'].value;\r\n    if (description) {\r\n      embedObject.description = description;\r\n    }\r\n    // Fields\r\n    let fields = document.getElementById('fields').children;\r\n    if (fields.length) {\r\n      if (!embedObject.hasOwnProperty('fields')) {\r\n        embedObject.fields = [];\r\n      }\r\n\r\n      for (let i = 0; i < fields.length; i++) {\r\n        let field_name = form.elements[`field-${i}:name`].value;\r\n        let field_value = form.elements[`field-${i}:value`].value;\r\n        let field_inline = form.elements[`field-${i}:inline`].checked;\r\n\r\n        if (field_name && field_value) {\r\n          embedObject.fields.push({\r\n            name: field_name,\r\n            value: field_value,\r\n            inline: field_inline\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // Thumbnail\r\n    let thumbnail = form.elements['thumbnail:url'].value;\r\n    if (thumbnail && RegEx.imageURL.test(thumbnail)) {\r\n      embedObject.thumbnail = thumbnail;\r\n    }\r\n    // Image\r\n    let image = form.elements['image:url'].value;\r\n    if (image && RegEx.imageURL.test(image)) {\r\n      embedObject.image = image;\r\n    }\r\n\r\n    // Video\r\n    // let video = form.elements['video'].value;\r\n    // if (video) {\r\n    //   if (!embedObject.hasOwnProperty('video')) {\r\n    //     embedObject.video = {}\r\n    //   }\r\n    //   embedObject.video.url = video;\r\n    // }\r\n\r\n    // Timestamp\r\n    let timestamp = form.elements['timestamp'].checked;\r\n    if (timestamp) {\r\n      embedObject.timestamp = new Date();\r\n    }\r\n\r\n    document.getElementById('json-output').innerHTML = JSON.stringify(embedObject, null, '  ');\r\n\r\n    // Code highlighter\r\n    let jsonOutput = document.getElementById('json-output').innerHTML;\r\n    jsonOutput = jsonOutput.replace(/\"([\\w]*)\":/g, '<span class=\"highlight key\">\"$1\"</span>:');\r\n    jsonOutput = jsonOutput.replace(/(\\d*),/g, '<span class=\"highlight number\">$1</span>,');\r\n    jsonOutput = jsonOutput.replace(/: (true|false)/g, ': <span class=\"highlight boolean\">$1</span>');\r\n    jsonOutput = jsonOutput.replace(/: \"(.*?)\"/g, ': <span class=\"highlight string\">\"$1\"</span>');\r\n    document.getElementById('json-output').innerHTML = jsonOutput;\r\n  }\r\n\r\n  copyJSON() {\r\n    let element = document.getElementById('json-output');\r\n    if (document.selections) {\r\n      let range = document.body.createTextRange();\r\n      range.moveToElementText(element);\r\n      range.select().createTextRange();\r\n      document.execCommand('Copy');\r\n    }\r\n    else if (window.getSelection) {\r\n      let range = document.createRange();\r\n      let selection = window.getSelection();    // Save the selection.\r\n      range.selectNodeContents(element);\r\n      selection.removeAllRanges();          // Remove all ranges from the selection.\r\n      selection.addRange(range);\r\n      document.execCommand('Copy');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className = \"cell\">\r\n        <div id = \"output-container\">\r\n          <div className = \"controller\">\r\n            <button onClick = {() => this.generateJSON()}>\r\n              <span role=\"img\" aria-label=\"Gear Emoji\">⚙</span>&ensp;Generate JSON\r\n            </button>\r\n            <button onClick = {() => this.copyJSON()}>\r\n              <span role=\"img\" aria-label=\"Copy Emoji\">🔗</span>&ensp;Copy JSON\r\n            </button>\r\n          </div>\r\n          <div className=\"output\">\r\n            <pre><div id=\"json-output\" readOnly>{JSON.stringify(this.state.embedObject, null, 2)}</div></pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","import React from 'react';\r\nimport Builder from '../Builder';\r\nimport Output from '../Output';\r\n\r\nclass Main extends React.Component {\r\n  render() {\r\n    return (\r\n      <main>\r\n        <Builder />\r\n        <Output />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Header from '../Header';\r\nimport Main from '../Main';\r\nimport './index.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='App-container'>\r\n        <Header />\r\n        <Main />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./Components/App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"__bastion\"));\r\nregisterServiceWorker();\r\n","exports.RegEx = {\r\n  URL: /^(http[s]?:\\/\\/)(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/i,\r\n  imageURL: /^(https?:\\/\\/)((([-a-z0-9]{1,})?(-?)+[-a-z0-9]{1,})(\\.))+([a-z]{1,63})\\/((([a-z0-9._\\-~#%])+\\/)+)?([a-z0-9._\\-~#%]+)\\.(jpg|jpeg|gif|png|bmp)$/i\r\n};\r\n"],"sourceRoot":""}